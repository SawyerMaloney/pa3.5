%{
/*
Authors: 
Sawyer Maloney - malonesm@bc.edu
John (Jack) Edwards - edwarddn@bc.edu
*/

#include <stdio.h>
#include "absyn.h"
#include "errormsg.h"
#include "symbol.h"
#include "util.h"
#include "y.tab.h"

int yylex(); /* lexing function prototype */
void yyerror(char * s);
E_Pos to_E_Pos(YYLTYPE pos);

%}

%define api.location.type {E_Pos};

%union {
    /* int pos */
    int ival;
    string sval;
    A_Exp exp;
    A_Var var;
    A_Dec dec;
    A_Type type;
    A_ExpList explist;
    A_DecList declist;
    A_Field field;
    A_FieldList fieldlist;
    A_FunDec fundec;
    A_FunDecList fundeclist;
    A_TypeDec typedec;
    A_TypeDecList typedeclist;
    A_Efield efield;
    A_EfieldList efieldlist;
}

%token <sval> ID STRING
%token <ival> INT

%token 
    COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
    LBRACE RBRACE DOT 
    PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
    AND OR ASSIGN
    ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
    BREAK NIL
    FUNCTION VAR TYPE 

// defining types from the union ---- getting rid of types for a second here
// does program need to be defined as absyn_root?
%type <ival> INT
%type <sval> STRING
%type <exp> program exp var_exp assign select iter func_call arith comparison boolean_exp 
%type <var> lvalue
%type <dec> dec
%type <declist> dec_seq
%type <fundec> function_dec
%type <fundeclist> funtion_dec_list
%type <typedec> type_dec
%type <typedeclist> type_dec_list
%type <type> type 
%type <explist> exp_list
%type <field> field
%type <fieldlist> type_field_list type_fields
%type <efield> record
%type <efieldlist> records record_list


%nonassoc LOW
%nonassoc DO OF
%nonassoc THEN 
%nonassoc ELSE
%nonassoc ASSIGN
%left SEMICOLON
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%start program

%%
program: exp { $$ = $1; ast = $$; if (!@1.first_column) printf(""); } // ??

exp:  INT      
    | STRING    
    | NIL
    | BREAK     
    | lvalue
    | assign
    | select
    | iter
    | func_call
    | arith     
    | comparison
    | boolean_exp
    | MINUS exp %prec UMINUS
    | ID LBRACE records RBRACE
    | ID LBRACK exp RBRACK OF exp
    | LPAREN RPAREN              
    | LPAREN exp_sequence RPAREN        
    | LET dec_seq IN END                
    | LET dec_seq IN exp_sequence END   

lvalue: ID lvalue_extension

lvalue_extension: DOT ID lvalue_extension /* access record members */
    | LBRACK exp RBRACK lvalue_extension  /* get array value at index */
    | /* empty */

assign: lvalue ASSIGN exp

func_call: ID LPAREN RPAREN     
    | ID LPAREN exp_list RPAREN  

arith: exp PLUS exp
    | exp MINUS exp 
    | exp TIMES exp
    | exp DIVIDE exp

boolean_exp: exp AND exp
    | exp OR exp

records: record_list
    | /* empty */ 

record_list: record
    | record_list COMMA record

record: ID EQ exp

select: IF exp THEN exp ELSE exp
    | IF exp THEN exp

iter: WHILE exp DO exp
    | FOR ID ASSIGN exp TO exp DO exp

exp_sequence: exp
    | exp_sequence SEMICOLON exp

exp_list: exp
    | exp_list COMMA exp

comparison: exp EQ exp
    | exp NEQ exp
    | exp GT exp
    | exp LT exp 
    | exp GE exp 
    | exp LE exp 
    | exp LT GT exp

dec_seq: dec dec_seq
    | /* empty */ 

dec: type_dec_list
    | variable_dec
    | function_dec_list

function_dec_list:  function_dec %prec LOW
                |   function_dec function_dec_list

type_dec: TYPE ID EQ type

type_dec_list:  type_dec
        |       type_dec type_dec_list

type: ID
    | LBRACE type_fields RBRACE
    | ARRAY OF ID

type_fields: type_field_list
    | /* empty */

type_field_list:    type_field 
    |               type_field_list COMMA type_field

type_field: ID COLON ID

variable_dec: VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ exp
    | FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp

%%

void yyerror(char *s) {
    EM_error(to_E_Pos(yylloc), "%s", s);
}

E_Pos to_E_Pos(YYLTYPE pos) {
    return (E_Pos) { pos.first_line, pos.first_column, pos.last_line, pos.last_column };
}
