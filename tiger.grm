%{
/*
Authors: 
Sawyer Maloney - malonesm@bc.edu
John (Jack) Edwards - edwarddn@bc.edu
*/

#include <stdio.h>
#include "absyn.h"
#include "errormsg.h"
#include "symbol.h"
#include "util.h"
#include "y.tab.h"

int yylex(); /* lexing function prototype */
void yyerror(char * s);
E_Pos to_E_Pos(YYLTYPE pos);

%}

%define api.location.type {E_Pos};

%union {
    /* int pos */
    int ival;
    string sval;
    A_Exp exp;
    A_Var var;
    A_Dec dec;
    A_Type type;
    A_ExpList explist;
    A_DecList declist;
    A_Field field;
    A_FieldList fieldlist;
    A_FunDec fundec;
    A_FunDecList fundeclist;
    A_TypeDec typedec;
    A_TypeDecList typedeclist;
    A_Efield efield;
    A_EfieldList efieldlist;
}

%token <sval> ID STRING
%token <ival> INT

%token 
    COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
    LBRACE RBRACE DOT 
    PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
    AND OR ASSIGN
    ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
    BREAK NIL
    FUNCTION VAR TYPE 

%type <exp> program exp assign select iter func_call arith comparison boolean_exp 
%type <var> lvalue //array also?
%type <dec> dec
%type <declist> dec_seq
%type <fundec> function_dec
%type <fundeclist> function_dec_list
%type <typedec> type_dec
%type <typedeclist> type_dec_list
%type <type> type 
%type <explist> exp_list exp_list_nonempty
%type <field> type_field
%type <fieldlist> type_field_list type_fields
%type <efield> record
%type <efieldlist> records record_list
/* expression sequence? */
/* we need to go through these */

%nonassoc LOW
%nonassoc DO OF
%nonassoc THEN 
%nonassoc ELSE
%nonassoc ASSIGN
%left SEMICOLON
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%start program

%%

/* E_Pos should all be switched to to_E_Pos(@#) */
program: exp { absyn_root = $1; }

exp:  INT               { $$ = make_A_IntExp(to_E_Pos(@1), $1); }     
    | STRING            { $$ = make_A_StringExp(to_E_Pos(@1), $1); }
    | NIL               { $$ = make_A_NilExp(to_E_Pos(@1); }
    | BREAK             { $$ = make_A_BreakExp(to_E_Pos(@1)); } 
    | lvalue            { $$ = make_A_VarExp(to_E_Pos(@1), $1) }
    | assign            { $$ = $1; }
    | select            { $$ = $1; }
    | iter              { $$ = $1; }
    | func_call         { $$ = $1; }
    | arith             { $$ = $1; }
    | comparison        { $$ = $1; }
    | boolean_exp       { $$ = $1; }
    | MINUS exp %prec UMINUS            { $$ = make_A_OpExp(to_E_Pos(@1), A_MINUS_OP, make_A_IntExp(E_Pos, 0), $2); }
    | ID LBRACE records RBRACE          { $$ = $3; } 
    | ID LBRACK exp RBRACK OF exp       { $$ = make_A_ArrayExp(to_E_Pos(@1), S_Symbol($1), $3, $6); }
    | LPAREN RPAREN                     { $$ = make_A_SeqExp(to_E_Pos(@1), NULL); } 
    | LPAREN exp_sequence RPAREN        { $$ = make_A_SeqExp(to_E_Pos(@1), $2); }
    | LET dec_seq IN exp_sequence END   { $$ = make_A_LetExp(to_E_Pos(@1), $2, make_A_SeqExp((to_E_Pos(@4), $4))); }  

lvalue: ID                      { $$ = make_A_SimpleVar(E_Pos, S_Symbol($1)); }
    | ID LBRACK exp RBRACK      { $$ = make_A_SubscriptVar(E_Pos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3); }
    | lvalue LBRACK exp RBRACK  { $$ = make_A_SubscriptVar(E_Pos, $1, $3); }
    | lvalue DOT ID             { $$ = make_A_FieldVar(E_Pos, $1, S_Symbol($3)); }

assign: lvalue ASSIGN exp  { $$ = make_A_AssignExp(E_Pos, $1, $3); }

func_call: ID LPAREN exp_list RPAREN  { $$ = make_A_CallExp(E_Pos, S_Symbol($1), $3); }

arith: exp PLUS exp   { $$ = make_A_OpExp(E_Pos, A_PLUS_OP, $1, $3); }
    | exp MINUS exp   { $$ = make_A_OpExp(E_Pos, A_MINUS_OP, $1, $3); }
    | exp TIMES exp   { $$ = make_A_OpExp(E_Pos, A_TIMES_OP, $1, $3); }
    | exp DIVIDE exp  { $$ = make_A_OpExp(E_Pos, A_DIVIDE_OP, $1, $3); }

select: IF exp THEN exp ELSE exp { $$ = make_A_IfExp(E_Pos, $2, $4, $6); }
    | IF exp THEN exp            { $$ = make_A_IfExp(E_Pos, $2, $2, NULL); }

    /* See end of chapter 4 */
boolean_exp: exp AND exp { $$ = make_A_IfExp(E_Pos, $1, $3, make_A_IntExp(E_Pos, 0)); }
    | exp OR exp         { $$ = make_A_IfExp(E_Pos, $1, make_A_IntExp(E_Pos, 1), $3); }


records: record_list  { $$ = $1; }
    | /* empty */     { $$ = NULL; }

record_list: record   { $$ = make_A_EFieldList($1, NULL); }
    | record_list COMMA record { $$ = make_A_EFieldList($3, $1); } 

record: ID EQ exp     { $$ = make_A_EField(S_Symbol($1), $3); }

exp_sequence: exp     { $$ = make_A_ExpList($1, NULL); }
    | exp_sequence SEMICOLON exp { $$ = make_A_ExpList($3, $1); }

exp_list:                  { $$ = NULL; }
    | exp_list_nonempty    { $$ = $1; }

exp_list_nonempty: exp     { $$ = make_A_ExpList($1, NULL); }
    | explist_nonempty COMMA exp { $$ = make_A_ExpList($3, $1); }


iter: WHILE exp DO exp  { $$ = make_A_WhileExp(E_Pos, $2, $4); }
    | FOR ID ASSIGN exp TO exp DO exp   { $$ = make_A_ForExp(E_Pos, S_Symbol($2), $4, $6, $8); }

comparison: exp EQ exp    { $$ = make_A_OpExp(E_Pos, A_EQ_OP, $1, $3); }
    | exp NEQ exp   { $$ = make_A_OpExp(E_Pos, A_NEQ_OP, $1, $3); }
    | exp GT exp    { $$ = make_A_OpExp(E_Pos, A_GT_OP, $1, $3); }
    | exp LT exp    { $$ = make_A_OpExp(E_Pos, A_LT_OP, $1, $3); }
    | exp GE exp    { $$ = make_A_OpExp(E_Pos, A_GE_OP, $1, $3); }
    | exp LE exp    { $$ = make_A_OpExp(E_Pos, A_LE_OP, $1, $3); }


/* This is where I start becoming less certain */
dec_seq: dec_seq dec        { $$ = make_A_DecList($2, $1); }
    | /* empty */           { $$ = NULL; }

dec: type_dec_list       { $$ = $1; }
    | variable_dec       { $$ = $1; }
    | function_dec_list  { $$ = $1; }
/* call make_group functions from here */


function_dec_list:  function_dec %prec LOW   { $$ = make_A_FunDecList($1, NULL); } // low prec, don't want this one chosen
    |   function_dec function_dec_list       { $$ = make_A_FunDecList($1, $2); }

type_dec: TYPE ID EQ type               { $$ = make_A_TypeDec($2, $4); }

type_dec_list:  type_dec                { $$ = make_A_TypeDecList($1, NULL); }
    |           type_dec type_dec_list  { $$ = make_A_TypeDecList($1, $2); }

type: ID                                { $$ = make_A_NameType(E_Pos, S_Symbol($1)); }
    | LBRACE type_fields RBRACE         { $$ = make_A_RecordType(E_Pos, $2); }
    | ARRAY OF ID                       { $$ = make_A_ArrayType(E_Pos, S_Symbol($3)); }

type_fields: type_field_list            { $$ = make_A_FieldList(NULL, $1); }
 // is this (and the rest of type_fields) correct? Or does it just return into type_fields correctly from type_field_list?
    | /* empty */

type_field_list:    type_field                          { $$ = make_A_FieldList($1, NULL); }
    |               type_field_list COMMA type_field    { $$ = make_A_FieldList($3, $1); }

type_field: ID COLON ID     { $$ = make_A_Field(E_Pos, $2, $1); }

variable_dec: VAR ID ASSIGN exp     { $$ = make_A_VarDec(E_Pos, S_Symbol($2), NULL, $4); } // null for type?
    | VAR ID COLON ID ASSIGN exp    { $$ = make_A_VarDec(E_Pos, S_Symbol($2), S_Symbol($4), $6); }

function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ exp  { $$ = make_A_FunDec(E_Pos, $2, $4, NULL, $7); }
    | FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp { $$ = make_A_FunDec(E_Pos, $2, $4, $7, $9); } // is this correct?

%%

void yyerror(char *s) {
    EM_error(to_E_Pos(yylloc), "%s", s);
}

E_Pos to_E_Pos(YYLTYPE pos) {
    return (E_Pos) { pos.first_line, pos.first_column, pos.last_line, pos.last_column };
}
