Rules useless in parser due to conflicts

   11 exp: BREAK


State 1 conflicts: 27 reduce/reduce
State 10 conflicts: 27 reduce/reduce


Grammar

    0 $accept: program $end

    1 var_exp: var

    2 var: simple_var

    3 simple_var: ID

    4 program: exp

    5 exp: INT
    6    | STRING
    7    | NIL
    8    | BREAK
    9    | var_exp
   10    | lvalue
   11    | BREAK
   12    | assign
   13    | select
   14    | iter
   15    | func_call
   16    | arith
   17    | comparison
   18    | boolean_exp
   19    | MINUS exp
   20    | ID LBRACE records RBRACE
   21    | ID LBRACK exp RBRACK OF exp
   22    | LPAREN RPAREN
   23    | LPAREN exp_sequence RPAREN
   24    | LET dec_seq IN END
   25    | LET dec_seq IN exp_sequence END

   26 lvalue: ID lvalue_extension

   27 lvalue_extension: DOT ID lvalue_extension
   28                 | LBRACK exp RBRACK lvalue_extension
   29                 | %empty

   30 assign: lvalue ASSIGN exp

   31 func_call: ID LPAREN RPAREN
   32          | ID LPAREN exp_list RPAREN

   33 arith: exp PLUS exp
   34      | exp MINUS exp
   35      | exp TIMES exp
   36      | exp DIVIDE exp

   37 boolean_exp: exp AND exp
   38            | exp OR exp

   39 records: record_list
   40        | %empty

   41 record_list: record
   42            | record_list COMMA record

   43 record: ID EQ exp

   44 select: IF exp THEN exp ELSE exp
   45       | IF exp THEN exp

   46 iter: WHILE exp DO exp
   47     | FOR ID ASSIGN exp TO exp DO exp

   48 exp_sequence: exp
   49             | exp_sequence SEMICOLON exp

   50 exp_list: exp
   51         | exp_list COMMA exp

   52 comparison: exp EQ exp
   53           | exp NEQ exp
   54           | exp GT exp
   55           | exp LT exp
   56           | exp GE exp
   57           | exp LE exp
   58           | exp LT GT exp

   59 dec_seq: dec dec_seq
   60        | %empty

   61 dec: type_dec
   62    | variable_dec
   63    | function_dec

   64 type_dec: TYPE ID EQ type

   65 type: ID
   66     | LBRACE type_fields RBRACE
   67     | ARRAY OF ID

   68 type_fields: type_field_list
   69            | %empty

   70 type_field_list: ID COLON ID
   71                | type_field_list COMMA ID COLON ID

   72 variable_dec: VAR ID ASSIGN exp
   73             | VAR ID COLON ID ASSIGN exp

   74 function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ exp
   75             | FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sval> (258) 3 20 21 26 27 31 32 43 47 64 65 67 70 71 72 73 74 75
    STRING <sval> (259) 6
    INT <ival> (260) 5
    COMMA (261) 42 51 71
    COLON (262) 70 71 73 75
    SEMICOLON (263) 49
    LPAREN (264) 22 23 31 32 74 75
    RPAREN (265) 22 23 31 32 74 75
    LBRACK (266) 21 28
    RBRACK (267) 21 28
    LBRACE (268) 20 66
    RBRACE (269) 20 66
    DOT (270) 27
    PLUS (271) 33
    MINUS (272) 19 34
    TIMES (273) 35
    DIVIDE (274) 36
    EQ (275) 43 52 64 74 75
    NEQ (276) 53
    LT (277) 55 58
    LE (278) 57
    GT (279) 54 58
    GE (280) 56
    AND (281) 37
    OR (282) 38
    ASSIGN (283) 30 47 72 73
    ARRAY (284) 67
    IF (285) 44 45
    THEN (286) 44 45
    ELSE (287) 44
    WHILE (288) 46
    FOR (289) 47
    TO (290) 47
    DO (291) 46 47
    LET (292) 24 25
    IN (293) 24 25
    END (294) 24 25
    OF (295) 21 67
    BREAK (296) 8 11
    NIL (297) 7
    FUNCTION (298) 74 75
    VAR (299) 72 73
    TYPE (300) 64
    UMINUS (301)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    var_exp (48)
        on left: 1
        on right: 9
    var (49)
        on left: 2
        on right: 1
    simple_var (50)
        on left: 3
        on right: 2
    program (51)
        on left: 4
        on right: 0
    exp (52)
        on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
        on right: 4 19 21 28 30 33 34 35 36 37 38 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 72 73 74 75
    lvalue (53)
        on left: 26
        on right: 10 30
    lvalue_extension (54)
        on left: 27 28 29
        on right: 26 27 28
    assign (55)
        on left: 30
        on right: 12
    func_call (56)
        on left: 31 32
        on right: 15
    arith (57)
        on left: 33 34 35 36
        on right: 16
    boolean_exp (58)
        on left: 37 38
        on right: 18
    records (59)
        on left: 39 40
        on right: 20
    record_list (60)
        on left: 41 42
        on right: 39 42
    record (61)
        on left: 43
        on right: 41 42
    select (62)
        on left: 44 45
        on right: 13
    iter (63)
        on left: 46 47
        on right: 14
    exp_sequence (64)
        on left: 48 49
        on right: 23 25 49
    exp_list (65)
        on left: 50 51
        on right: 32 51
    comparison (66)
        on left: 52 53 54 55 56 57 58
        on right: 17
    dec_seq (67)
        on left: 59 60
        on right: 24 25 59
    dec (68)
        on left: 61 62 63
        on right: 59
    type_dec (69)
        on left: 64
        on right: 61
    type (70)
        on left: 65 66 67
        on right: 64
    type_fields (71)
        on left: 68 69
        on right: 66 74 75
    type_field_list (72)
        on left: 70 71
        on right: 68 71
    variable_dec (73)
        on left: 72 73
        on right: 62
    function_dec (74)
        on left: 74 75
        on right: 63


State 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    program      go to state 15
    exp          go to state 16
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 1

    3 simple_var: ID .
   20 exp: ID . LBRACE records RBRACE
   21    | ID . LBRACK exp RBRACK OF exp
   26 lvalue: ID . lvalue_extension
   31 func_call: ID . LPAREN RPAREN
   32          | ID . LPAREN exp_list RPAREN

    LPAREN  shift, and go to state 25
    LBRACK  shift, and go to state 26
    LBRACE  shift, and go to state 27
    DOT     shift, and go to state 28

    $end       reduce using rule 3 (simple_var)
    $end       [reduce using rule 29 (lvalue_extension)]
    COMMA      reduce using rule 3 (simple_var)
    COMMA      [reduce using rule 29 (lvalue_extension)]
    SEMICOLON  reduce using rule 3 (simple_var)
    SEMICOLON  [reduce using rule 29 (lvalue_extension)]
    RPAREN     reduce using rule 3 (simple_var)
    RPAREN     [reduce using rule 29 (lvalue_extension)]
    RBRACK     reduce using rule 3 (simple_var)
    RBRACK     [reduce using rule 29 (lvalue_extension)]
    RBRACE     reduce using rule 3 (simple_var)
    RBRACE     [reduce using rule 29 (lvalue_extension)]
    PLUS       reduce using rule 3 (simple_var)
    PLUS       [reduce using rule 29 (lvalue_extension)]
    MINUS      reduce using rule 3 (simple_var)
    MINUS      [reduce using rule 29 (lvalue_extension)]
    TIMES      reduce using rule 3 (simple_var)
    TIMES      [reduce using rule 29 (lvalue_extension)]
    DIVIDE     reduce using rule 3 (simple_var)
    DIVIDE     [reduce using rule 29 (lvalue_extension)]
    EQ         reduce using rule 3 (simple_var)
    EQ         [reduce using rule 29 (lvalue_extension)]
    NEQ        reduce using rule 3 (simple_var)
    NEQ        [reduce using rule 29 (lvalue_extension)]
    LT         reduce using rule 3 (simple_var)
    LT         [reduce using rule 29 (lvalue_extension)]
    LE         reduce using rule 3 (simple_var)
    LE         [reduce using rule 29 (lvalue_extension)]
    GT         reduce using rule 3 (simple_var)
    GT         [reduce using rule 29 (lvalue_extension)]
    GE         reduce using rule 3 (simple_var)
    GE         [reduce using rule 29 (lvalue_extension)]
    AND        reduce using rule 3 (simple_var)
    AND        [reduce using rule 29 (lvalue_extension)]
    OR         reduce using rule 3 (simple_var)
    OR         [reduce using rule 29 (lvalue_extension)]
    ASSIGN     reduce using rule 29 (lvalue_extension)
    THEN       reduce using rule 3 (simple_var)
    THEN       [reduce using rule 29 (lvalue_extension)]
    ELSE       reduce using rule 3 (simple_var)
    ELSE       [reduce using rule 29 (lvalue_extension)]
    TO         reduce using rule 3 (simple_var)
    TO         [reduce using rule 29 (lvalue_extension)]
    DO         reduce using rule 3 (simple_var)
    DO         [reduce using rule 29 (lvalue_extension)]
    IN         reduce using rule 3 (simple_var)
    IN         [reduce using rule 29 (lvalue_extension)]
    END        reduce using rule 3 (simple_var)
    END        [reduce using rule 29 (lvalue_extension)]
    FUNCTION   reduce using rule 3 (simple_var)
    FUNCTION   [reduce using rule 29 (lvalue_extension)]
    VAR        reduce using rule 3 (simple_var)
    VAR        [reduce using rule 29 (lvalue_extension)]
    TYPE       reduce using rule 3 (simple_var)
    TYPE       [reduce using rule 29 (lvalue_extension)]
    $default   reduce using rule 3 (simple_var)

    lvalue_extension  go to state 29


State 2

    6 exp: STRING .

    $default  reduce using rule 6 (exp)


State 3

    5 exp: INT .

    $default  reduce using rule 5 (exp)


State 4

   22 exp: LPAREN . RPAREN
   23    | LPAREN . exp_sequence RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 30
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp       go to state 12
    var           go to state 13
    simple_var    go to state 14
    exp           go to state 31
    lvalue        go to state 17
    assign        go to state 18
    func_call     go to state 19
    arith         go to state 20
    boolean_exp   go to state 21
    select        go to state 22
    iter          go to state 23
    exp_sequence  go to state 32
    comparison    go to state 24


State 5

   19 exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 33
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 6

   44 select: IF . exp THEN exp ELSE exp
   45       | IF . exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 34
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 7

   46 iter: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 35
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 8

   47 iter: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 36


State 9

   24 exp: LET . dec_seq IN END
   25    | LET . dec_seq IN exp_sequence END

    FUNCTION  shift, and go to state 37
    VAR       shift, and go to state 38
    TYPE      shift, and go to state 39

    $default  reduce using rule 60 (dec_seq)

    dec_seq       go to state 40
    dec           go to state 41
    type_dec      go to state 42
    variable_dec  go to state 43
    function_dec  go to state 44


State 10

    8 exp: BREAK .
   11    | BREAK .

    $end       reduce using rule 8 (exp)
    $end       [reduce using rule 11 (exp)]
    COMMA      reduce using rule 8 (exp)
    COMMA      [reduce using rule 11 (exp)]
    SEMICOLON  reduce using rule 8 (exp)
    SEMICOLON  [reduce using rule 11 (exp)]
    RPAREN     reduce using rule 8 (exp)
    RPAREN     [reduce using rule 11 (exp)]
    RBRACK     reduce using rule 8 (exp)
    RBRACK     [reduce using rule 11 (exp)]
    RBRACE     reduce using rule 8 (exp)
    RBRACE     [reduce using rule 11 (exp)]
    PLUS       reduce using rule 8 (exp)
    PLUS       [reduce using rule 11 (exp)]
    MINUS      reduce using rule 8 (exp)
    MINUS      [reduce using rule 11 (exp)]
    TIMES      reduce using rule 8 (exp)
    TIMES      [reduce using rule 11 (exp)]
    DIVIDE     reduce using rule 8 (exp)
    DIVIDE     [reduce using rule 11 (exp)]
    EQ         reduce using rule 8 (exp)
    EQ         [reduce using rule 11 (exp)]
    NEQ        reduce using rule 8 (exp)
    NEQ        [reduce using rule 11 (exp)]
    LT         reduce using rule 8 (exp)
    LT         [reduce using rule 11 (exp)]
    LE         reduce using rule 8 (exp)
    LE         [reduce using rule 11 (exp)]
    GT         reduce using rule 8 (exp)
    GT         [reduce using rule 11 (exp)]
    GE         reduce using rule 8 (exp)
    GE         [reduce using rule 11 (exp)]
    AND        reduce using rule 8 (exp)
    AND        [reduce using rule 11 (exp)]
    OR         reduce using rule 8 (exp)
    OR         [reduce using rule 11 (exp)]
    THEN       reduce using rule 8 (exp)
    THEN       [reduce using rule 11 (exp)]
    ELSE       reduce using rule 8 (exp)
    ELSE       [reduce using rule 11 (exp)]
    TO         reduce using rule 8 (exp)
    TO         [reduce using rule 11 (exp)]
    DO         reduce using rule 8 (exp)
    DO         [reduce using rule 11 (exp)]
    IN         reduce using rule 8 (exp)
    IN         [reduce using rule 11 (exp)]
    END        reduce using rule 8 (exp)
    END        [reduce using rule 11 (exp)]
    FUNCTION   reduce using rule 8 (exp)
    FUNCTION   [reduce using rule 11 (exp)]
    VAR        reduce using rule 8 (exp)
    VAR        [reduce using rule 11 (exp)]
    TYPE       reduce using rule 8 (exp)
    TYPE       [reduce using rule 11 (exp)]
    $default   reduce using rule 8 (exp)


State 11

    7 exp: NIL .

    $default  reduce using rule 7 (exp)


State 12

    9 exp: var_exp .

    $default  reduce using rule 9 (exp)


State 13

    1 var_exp: var .

    $default  reduce using rule 1 (var_exp)


State 14

    2 var: simple_var .

    $default  reduce using rule 2 (var)


State 15

    0 $accept: program . $end

    $end  shift, and go to state 45


State 16

    4 program: exp .
   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 4 (program)


State 17

   10 exp: lvalue .
   30 assign: lvalue . ASSIGN exp

    ASSIGN  shift, and go to state 58

    $default  reduce using rule 10 (exp)


State 18

   12 exp: assign .

    $default  reduce using rule 12 (exp)


State 19

   15 exp: func_call .

    $default  reduce using rule 15 (exp)


State 20

   16 exp: arith .

    $default  reduce using rule 16 (exp)


State 21

   18 exp: boolean_exp .

    $default  reduce using rule 18 (exp)


State 22

   13 exp: select .

    $default  reduce using rule 13 (exp)


State 23

   14 exp: iter .

    $default  reduce using rule 14 (exp)


State 24

   17 exp: comparison .

    $default  reduce using rule 17 (exp)


State 25

   31 func_call: ID LPAREN . RPAREN
   32          | ID LPAREN . exp_list RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 59
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 60
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    exp_list     go to state 61
    comparison   go to state 24


State 26

   21 exp: ID LBRACK . exp RBRACK OF exp
   28 lvalue_extension: LBRACK . exp RBRACK lvalue_extension

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 62
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 27

   20 exp: ID LBRACE . records RBRACE

    ID  shift, and go to state 63

    $default  reduce using rule 40 (records)

    records      go to state 64
    record_list  go to state 65
    record       go to state 66


State 28

   27 lvalue_extension: DOT . ID lvalue_extension

    ID  shift, and go to state 67


State 29

   26 lvalue: ID lvalue_extension .

    $default  reduce using rule 26 (lvalue)


State 30

   22 exp: LPAREN RPAREN .

    $default  reduce using rule 22 (exp)


State 31

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   48 exp_sequence: exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 48 (exp_sequence)


State 32

   23 exp: LPAREN exp_sequence . RPAREN
   49 exp_sequence: exp_sequence . SEMICOLON exp

    SEMICOLON  shift, and go to state 68
    RPAREN     shift, and go to state 69


State 33

   19 exp: MINUS exp .
   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    $default  reduce using rule 19 (exp)


State 34

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   44 select: IF exp . THEN exp ELSE exp
   45       | IF exp . THEN exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    THEN    shift, and go to state 70


State 35

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   46 iter: WHILE exp . DO exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    DO      shift, and go to state 71


State 36

   47 iter: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 72


State 37

   74 function_dec: FUNCTION . ID LPAREN type_fields RPAREN EQ exp
   75             | FUNCTION . ID LPAREN type_fields RPAREN COLON ID EQ exp

    ID  shift, and go to state 73


State 38

   72 variable_dec: VAR . ID ASSIGN exp
   73             | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 74


State 39

   64 type_dec: TYPE . ID EQ type

    ID  shift, and go to state 75


State 40

   24 exp: LET dec_seq . IN END
   25    | LET dec_seq . IN exp_sequence END

    IN  shift, and go to state 76


State 41

   59 dec_seq: dec . dec_seq

    FUNCTION  shift, and go to state 37
    VAR       shift, and go to state 38
    TYPE      shift, and go to state 39

    $default  reduce using rule 60 (dec_seq)

    dec_seq       go to state 77
    dec           go to state 41
    type_dec      go to state 42
    variable_dec  go to state 43
    function_dec  go to state 44


State 42

   61 dec: type_dec .

    $default  reduce using rule 61 (dec)


State 43

   62 dec: variable_dec .

    $default  reduce using rule 62 (dec)


State 44

   63 dec: function_dec .

    $default  reduce using rule 63 (dec)


State 45

    0 $accept: program $end .

    $default  accept


State 46

   33 arith: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 78
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 47

   34 arith: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 79
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 48

   35 arith: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 80
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 49

   36 arith: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 81
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 50

   52 comparison: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 82
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 51

   53 comparison: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 83
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 52

   55 comparison: exp LT . exp
   58           | exp LT . GT exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    GT      shift, and go to state 84
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 85
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 53

   57 comparison: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 86
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 54

   54 comparison: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 87
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 55

   56 comparison: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 88
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 56

   37 boolean_exp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 89
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 57

   38 boolean_exp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 90
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 58

   30 assign: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 91
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 59

   31 func_call: ID LPAREN RPAREN .

    $default  reduce using rule 31 (func_call)


State 60

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   50 exp_list: exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 50 (exp_list)


State 61

   32 func_call: ID LPAREN exp_list . RPAREN
   51 exp_list: exp_list . COMMA exp

    COMMA   shift, and go to state 92
    RPAREN  shift, and go to state 93


State 62

   21 exp: ID LBRACK exp . RBRACK OF exp
   28 lvalue_extension: LBRACK exp . RBRACK lvalue_extension
   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    RBRACK  shift, and go to state 94
    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57


State 63

   43 record: ID . EQ exp

    EQ  shift, and go to state 95


State 64

   20 exp: ID LBRACE records . RBRACE

    RBRACE  shift, and go to state 96


State 65

   39 records: record_list .
   42 record_list: record_list . COMMA record

    COMMA  shift, and go to state 97

    $default  reduce using rule 39 (records)


State 66

   41 record_list: record .

    $default  reduce using rule 41 (record_list)


State 67

   27 lvalue_extension: DOT ID . lvalue_extension

    LBRACK  shift, and go to state 98
    DOT     shift, and go to state 28

    $default  reduce using rule 29 (lvalue_extension)

    lvalue_extension  go to state 99


State 68

   49 exp_sequence: exp_sequence SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 100
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 69

   23 exp: LPAREN exp_sequence RPAREN .

    $default  reduce using rule 23 (exp)


State 70

   44 select: IF exp THEN . exp ELSE exp
   45       | IF exp THEN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 101
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 71

   46 iter: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 102
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 72

   47 iter: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 103
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 73

   74 function_dec: FUNCTION ID . LPAREN type_fields RPAREN EQ exp
   75             | FUNCTION ID . LPAREN type_fields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 104


State 74

   72 variable_dec: VAR ID . ASSIGN exp
   73             | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 105
    ASSIGN  shift, and go to state 106


State 75

   64 type_dec: TYPE ID . EQ type

    EQ  shift, and go to state 107


State 76

   24 exp: LET dec_seq IN . END
   25    | LET dec_seq IN . exp_sequence END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    END     shift, and go to state 108
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp       go to state 12
    var           go to state 13
    simple_var    go to state 14
    exp           go to state 31
    lvalue        go to state 17
    assign        go to state 18
    func_call     go to state 19
    arith         go to state 20
    boolean_exp   go to state 21
    select        go to state 22
    iter          go to state 23
    exp_sequence  go to state 109
    comparison    go to state 24


State 77

   59 dec_seq: dec dec_seq .

    $default  reduce using rule 59 (dec_seq)


State 78

   33 arith: exp . PLUS exp
   33      | exp PLUS exp .
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    $default  reduce using rule 33 (arith)


State 79

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   34      | exp MINUS exp .
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    $default  reduce using rule 34 (arith)


State 80

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   35      | exp TIMES exp .
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    $default  reduce using rule 35 (arith)


State 81

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   36      | exp DIVIDE exp .
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    $default  reduce using rule 36 (arith)


State 82

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   52           | exp EQ exp .
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 52 (comparison)


State 83

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   53           | exp NEQ exp .
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 53 (comparison)


State 84

   58 comparison: exp LT GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 110
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 85

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   55           | exp LT exp .
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 55 (comparison)


State 86

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   57           | exp LE exp .
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 57 (comparison)


State 87

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   54           | exp GT exp .
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 54 (comparison)


State 88

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   56           | exp GE exp .
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 56 (comparison)


State 89

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   37            | exp AND exp .
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55

    $default  reduce using rule 37 (boolean_exp)


State 90

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   38            | exp OR exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56

    $default  reduce using rule 38 (boolean_exp)


State 91

   30 assign: lvalue ASSIGN exp .
   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 30 (assign)


State 92

   51 exp_list: exp_list COMMA . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 111
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 93

   32 func_call: ID LPAREN exp_list RPAREN .

    $default  reduce using rule 32 (func_call)


State 94

   21 exp: ID LBRACK exp RBRACK . OF exp
   28 lvalue_extension: LBRACK exp RBRACK . lvalue_extension

    LBRACK  shift, and go to state 98
    DOT     shift, and go to state 28
    OF      shift, and go to state 112

    $default  reduce using rule 29 (lvalue_extension)

    lvalue_extension  go to state 113


State 95

   43 record: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 114
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 96

   20 exp: ID LBRACE records RBRACE .

    $default  reduce using rule 20 (exp)


State 97

   42 record_list: record_list COMMA . record

    ID  shift, and go to state 63

    record  go to state 115


State 98

   28 lvalue_extension: LBRACK . exp RBRACK lvalue_extension

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 116
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 99

   27 lvalue_extension: DOT ID lvalue_extension .

    $default  reduce using rule 27 (lvalue_extension)


State 100

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   49 exp_sequence: exp_sequence SEMICOLON exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 49 (exp_sequence)


State 101

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   44 select: IF exp THEN exp . ELSE exp
   45       | IF exp THEN exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    ELSE    shift, and go to state 117

    $default  reduce using rule 45 (select)


State 102

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   46 iter: WHILE exp DO exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 46 (iter)


State 103

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   47 iter: FOR ID ASSIGN exp . TO exp DO exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    TO      shift, and go to state 118


State 104

   74 function_dec: FUNCTION ID LPAREN . type_fields RPAREN EQ exp
   75             | FUNCTION ID LPAREN . type_fields RPAREN COLON ID EQ exp

    ID  shift, and go to state 119

    $default  reduce using rule 69 (type_fields)

    type_fields      go to state 120
    type_field_list  go to state 121


State 105

   73 variable_dec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 122


State 106

   72 variable_dec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 123
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 107

   64 type_dec: TYPE ID EQ . type

    ID      shift, and go to state 124
    LBRACE  shift, and go to state 125
    ARRAY   shift, and go to state 126

    type  go to state 127


State 108

   24 exp: LET dec_seq IN END .

    $default  reduce using rule 24 (exp)


State 109

   25 exp: LET dec_seq IN exp_sequence . END
   49 exp_sequence: exp_sequence . SEMICOLON exp

    SEMICOLON  shift, and go to state 68
    END        shift, and go to state 128


State 110

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp
   58           | exp LT GT exp .

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 58 (comparison)


State 111

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   51 exp_list: exp_list COMMA exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 51 (exp_list)


State 112

   21 exp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 129
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 113

   28 lvalue_extension: LBRACK exp RBRACK lvalue_extension .

    $default  reduce using rule 28 (lvalue_extension)


State 114

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   43 record: ID EQ exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 43 (record)


State 115

   42 record_list: record_list COMMA record .

    $default  reduce using rule 42 (record_list)


State 116

   28 lvalue_extension: LBRACK exp . RBRACK lvalue_extension
   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    RBRACK  shift, and go to state 130
    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57


State 117

   44 select: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 131
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 118

   47 iter: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 132
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 119

   70 type_field_list: ID . COLON ID

    COLON  shift, and go to state 133


State 120

   74 function_dec: FUNCTION ID LPAREN type_fields . RPAREN EQ exp
   75             | FUNCTION ID LPAREN type_fields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 134


State 121

   68 type_fields: type_field_list .
   71 type_field_list: type_field_list . COMMA ID COLON ID

    COMMA  shift, and go to state 135

    $default  reduce using rule 68 (type_fields)


State 122

   73 variable_dec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 136


State 123

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp
   72 variable_dec: VAR ID ASSIGN exp .

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 72 (variable_dec)


State 124

   65 type: ID .

    $default  reduce using rule 65 (type)


State 125

   66 type: LBRACE . type_fields RBRACE

    ID  shift, and go to state 119

    $default  reduce using rule 69 (type_fields)

    type_fields      go to state 137
    type_field_list  go to state 121


State 126

   67 type: ARRAY . OF ID

    OF  shift, and go to state 138


State 127

   64 type_dec: TYPE ID EQ type .

    $default  reduce using rule 64 (type_dec)


State 128

   25 exp: LET dec_seq IN exp_sequence END .

    $default  reduce using rule 25 (exp)


State 129

   21 exp: ID LBRACK exp RBRACK OF exp .
   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 21 (exp)


State 130

   28 lvalue_extension: LBRACK exp RBRACK . lvalue_extension

    LBRACK  shift, and go to state 98
    DOT     shift, and go to state 28

    $default  reduce using rule 29 (lvalue_extension)

    lvalue_extension  go to state 113


State 131

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   44 select: IF exp THEN exp ELSE exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 44 (select)


State 132

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   47 iter: FOR ID ASSIGN exp TO exp . DO exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    DO      shift, and go to state 139


State 133

   70 type_field_list: ID COLON . ID

    ID  shift, and go to state 140


State 134

   74 function_dec: FUNCTION ID LPAREN type_fields RPAREN . EQ exp
   75             | FUNCTION ID LPAREN type_fields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 141
    EQ     shift, and go to state 142


State 135

   71 type_field_list: type_field_list COMMA . ID COLON ID

    ID  shift, and go to state 143


State 136

   73 variable_dec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 144
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 137

   66 type: LBRACE type_fields . RBRACE

    RBRACE  shift, and go to state 145


State 138

   67 type: ARRAY OF . ID

    ID  shift, and go to state 146


State 139

   47 iter: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 147
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 140

   70 type_field_list: ID COLON ID .

    $default  reduce using rule 70 (type_field_list)


State 141

   75 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 148


State 142

   74 function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 149
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 143

   71 type_field_list: type_field_list COMMA ID . COLON ID

    COLON  shift, and go to state 150


State 144

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp
   73 variable_dec: VAR ID COLON ID ASSIGN exp .

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 73 (variable_dec)


State 145

   66 type: LBRACE type_fields RBRACE .

    $default  reduce using rule 66 (type)


State 146

   67 type: ARRAY OF ID .

    $default  reduce using rule 67 (type)


State 147

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   47 iter: FOR ID ASSIGN exp TO exp DO exp .
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 47 (iter)


State 148

   75 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 151


State 149

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp
   74 function_dec: FUNCTION ID LPAREN type_fields RPAREN EQ exp .

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 74 (function_dec)


State 150

   71 type_field_list: type_field_list COMMA ID COLON . ID

    ID  shift, and go to state 152


State 151

   75 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    var_exp      go to state 12
    var          go to state 13
    simple_var   go to state 14
    exp          go to state 153
    lvalue       go to state 17
    assign       go to state 18
    func_call    go to state 19
    arith        go to state 20
    boolean_exp  go to state 21
    select       go to state 22
    iter         go to state 23
    comparison   go to state 24


State 152

   71 type_field_list: type_field_list COMMA ID COLON ID .

    $default  reduce using rule 71 (type_field_list)


State 153

   33 arith: exp . PLUS exp
   34      | exp . MINUS exp
   35      | exp . TIMES exp
   36      | exp . DIVIDE exp
   37 boolean_exp: exp . AND exp
   38            | exp . OR exp
   52 comparison: exp . EQ exp
   53           | exp . NEQ exp
   54           | exp . GT exp
   55           | exp . LT exp
   56           | exp . GE exp
   57           | exp . LE exp
   58           | exp . LT GT exp
   75 function_dec: FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp .

    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    EQ      shift, and go to state 50
    NEQ     shift, and go to state 51
    LT      shift, and go to state 52
    LE      shift, and go to state 53
    GT      shift, and go to state 54
    GE      shift, and go to state 55
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 75 (function_dec)
